name: Deploy to App Store
on:
  workflow_dispatch
env:
  FLUTTER_VERSION: '${{ vars.FLUTTER_VERSION }}'

jobs:
  ios-build:
    runs-on: macOS-latest
    environment: production 
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}
      - name: Install the provisioning profile
        env:
          PROVISIONING_CERTIFICATE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
    
          echo -n "$PROVISIONING_CERTIFICATE_BASE64" | base64 --decode --output $PP_PATH
    
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - run: cd fivekmrun_app_flutter && flutter pub get
      - shell: bash
        env:
          STRAVA_CLIENT_ID: ${{ secrets.STRAVA_CLIENT_ID }}
          STRAVA_SECRET: ${{ secrets.STRAVA_SECRET }}
          GOOGLE_MAPS_KEY: ${{ secrets.GOOGLE_MAPS_KEY }}
        run: |
          mkdir ./fivekmrun_app_flutter/lib/private && cat << EOF > ./fivekmrun_app_flutter/lib/private/secrets.dart
          const stravaSecret = "$STRAVA_SECRET";
          const stravaClientId = "$STRAVA_CLIENT_ID";
          const googleMapsKey = "$GOOGLE_MAPS_KEY"; 
          EOF
      - name: 'Install Flutter'
        uses: subosito/flutter-action@v2
        with: 
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          architecture: x64
    #TODO: add google analytics production configuration
      - name: Build Flutter
        run: cd fivekmrun_app_flutter && flutter build ios --release --no-codesign
      - name: Build resolve Swift dependencies
        run: xcodebuild -resolvePackageDependencies -workspace fivekmrun_app_flutter/ios/Runner.xcworkspace -scheme Runner -configuration Release
      - name: Build xArchive
        run: |
          xcodebuild -workspace fivekmrun_app_flutter/ios/Runner.xcworkspace -scheme Runner -configuration Release DEVELOPMENT_TEAM=48HKWHQ6FS -sdk 'iphoneos' -destination 'generic/platform=iOS' -archivePath build-output/app.xcarchive PROVISIONING_PROFILE=1777610c-cb24-460c-85ea-101174d824d0 clean archive CODE_SIGN_IDENTITY="Apple Distribution: 5 KM PARK BG NON-PROFIT ASSOCIATION (48HKWHQ6FS)"
      - name: Create export options plist
        run: |
          echo -n "$IOS_EXPORT_OPTIONS" > $RUNNER_TEMP/exportOptions.plist
          echo "Created export options plist: $RUNNER_TEMP/exportOptions.plist"  
      - name: Export ipa
        run: cd fivekmrun_app_flutter && xcodebuild -exportArchive -archivePath build-output/app.xcarchive -exportPath build-output/ios -exportOptionsPlist $RUNNER_TEMP/exportOptions.plist
      - name: Publish iOS Artefacts
        uses: actions/upload-artifact@v1
        with:
          name: release-ios
          path: build-output/ios     

    #   - name: 'Download Provisioning Profiles'
    #     id: provisioning
    #     uses: apple-actions/download-provisioning-profiles@v1
    #     with: 
    #       bundle-id: 'bg.5kmpark.5kmrun'
    #       profile-type: 'IOS_APP_DEVELOPMENT'
    #       issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
    #       api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
    #       api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      
    #   - name: 'Downloaded Provisioning Profiles'
    #     run: echo ${{ steps.provisioning.outputs.profiles }}

    #   - name: Install the Apple certificate and provisioning profile
    #     env:
    #       BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
    #       P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
    #       KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    #       EXPORT_OPTIONS_PLIST: ${{ secrets.IOS_EXPORT_OPTIONS_PLIST }}
    #     run: |
    #       # create variables
    #       CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
    #       PP_PATH=$RUNNER_TEMP/5kmrun-developer-profile.mobileprovision
    #       KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
    #       EXPORT_OPTIONS_PATH=$RUNNER_TEMP/exportOptions.plist

    #       # import certificate and provisioning profile from secrets
    #       echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
    #       echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

    #       # create temporary keychain
    #       security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
    #       security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
    #       security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

    #       # import certificate to keychain
    #       security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
    #       security list-keychain -d user -s $KEYCHAIN_PATH

    #       # create export options plist
    #       echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $RUNNER_TEMP/exportOptions.plist
    #       echo "Created export options plist: $RUNNER_TEMP/exportOptions.plist"

    #   - uses: actions/checkout@v3
    #   - name: Set up ruby env
    #     uses: ruby/setup-ruby@v1
    #     with:
    #       ruby-version: 2.7.2
    #       bundler-cache: true


    #   - name: 'Install Flutter'
    #     uses: subosito/flutter-action@v2
    #     with: 
    #       flutter-version: ${{ env.FLUTTER_VERSION }}
    #       channel: 'stable'
    #       architecture: x64
    # #TODO: add google analytics production configuration

    #   - run: cd fivekmrun_app_flutter && flutter pub get
    #   - shell: bash
    #     env:
    #       STRAVA_CLIENT_ID: ${{ secrets.STRAVA_CLIENT_ID }}
    #       STRAVA_SECRET: ${{ secrets.STRAVA_SECRET }}
    #       GOOGLE_MAPS_KEY: ${{ secrets.GOOGLE_MAPS_KEY }}
    #     run: |
    #       mkdir ./fivekmrun_app_flutter/lib/private && cat << EOF > ./fivekmrun_app_flutter/lib/private/secrets.dart
    #       const stravaSecret = "$STRAVA_SECRET";
    #       const stravaClientId = "$STRAVA_CLIENT_ID";
    #       const googleMapsKey = "$GOOGLE_MAPS_KEY"; 
    #       EOF
      
    #   - run: cd fivekmrun_app_flutter && flutter build ipa --release --export-options-plist=$RUNNER_TEMP/exportOptions.plist

    #   - name: 'Upload app to TestFlight'
    #     uses: apple-actions/upload-testflight-build@v1
    #     with: 
    #       app-path: 'fivekmrun_app_flutter/build/ios/iphoneos/Runner.app' 
    #       issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
    #       api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
    #       api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}